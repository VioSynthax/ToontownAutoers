import random
from direct.interval.IntervalGlobal import *
from direct.distributed import DistributedObject
from toontown.distributed import ToontownClientRepository
from toontown.toonbase import ToontownBattleGlobals
from toontown.toon import *
from toontown.battle import DistributedBattle
from toontown.coghq import DistributedCountryClubBattle
from toontown.coghq import DistributedCountryClub
from toontown.coghq import DistributedMoleField
from toontown.coghq import DistributedGolfGreenGame
from toontown.coghq import DistributedCogHQDoor
from toontown.coghq import CogDisguiseGlobals
from toontown.building import DistributedDoor
from toontown.suit.DistributedMintSuit import DistributedMintSuit
from toontown.suit.DistributedSuit import DistributedSuit
from toontown.safezone import DDPlayground
from toontown.safezone import DistributedPartyGate
from toontown.safezone import DistributedTrolley

ToontownBattleGlobals.SkipMovie=1
DistributedToon.reconsiderCheesyEffect=lambda *x,**kwds:None
ToontownClientRepository.ToontownClientRepository.dumpAllSubShardObjects=lambda self: None

faceOffHook = lambda self, ts, name, callback:self.d_faceOffDone(self)
DistributedCountryClubBattle.DistributedCountryClubBattle._DistributedLevelBattle__faceOff = faceOffHook
DistributedBattle.DistributedBattle._DistributedBattle__faceOff = faceOffHook

oldTrolleyInit = DistributedTrolley.DistributedTrolley.__init__
oldPartyInit = DistributedPartyGate.DistributedPartyGate.__init__
oldDoorInit = DistributedDoor.DistributedDoor.__init__
 
oldFisherAnnounceGenerate = DistributedNPCFisherman.DistributedNPCFisherman.announceGenerate
def newFishermanAnnounceGenerate(self):
    try:
        oldFisherAnnounceGenerate(self)
    except:
        return None
 
oldPartyPlannerAnnounceGenerate = DistributedNPCPartyPerson.DistributedNPCPartyPerson.announceGenerate
def newPartyPlannerAnnounceGenerate(self):
    try:
        oldPartyPlannerAnnounceGenerate(self)
    except:
        return None
 
def newInit(self, cr):
    for obj in dir(self):
        exec 'self.%s = lambda *x:None' % obj
    return None


class restock:

    def __init__(self):
        self.firstTrack=2
        self.secondTrack=0
        self.thirdTrack=4
        self.fourthTrack=3
        self.desiredLevel1=5
        self.desiredLevel2=4
        self.desiredLevel3=5
        self.desiredLevel4=5
        self.desiredInv='\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        self.maxCarryGags = base.localAvatar.getMaxCarry()
        self.gagshop_zoneId = 4503
        self.noToons=Sequence(Func(self.removeToons), Wait(1.5))
        self.noTrolley=False
        self.unloaded=True
        self.wasInBattle=False
        
        DistributedNPCFisherman.DistributedNPCFisherman.announceGenerate = newFishermanAnnounceGenerate
        DistributedNPCPartyPerson.DistributedNPCPartyPerson.announceGenerate = newPartyPlannerAnnounceGenerate
        
        self.lookAroundHookSeq = Sequence(Func(self.lookAroundHookFunc), Wait(2.5))
        self.lookAroundHookSeq.loop()
        ToonHead.ToonHead._ToonHead__lookAround = lambda *x:None
        
    def lookAroundHookFunc(self):
        if hasattr(base, 'localAvatar'):
            base.localAvatar.findSomethingToLookAt = lambda *x:None
            self.oldFindSomethingToLookAt = base.localAvatar.findSomethingToLookAt
            self.lookAroundHookSeq.finish()
        self.oldLookAround = ToonHead.ToonHead._ToonHead__lookAround
        
    def collectLaff(self):
        for treasure in base.cr.doFindAll('Treasure'):
            treasure.d_requestGrab()
            
    def removeToons(self):
        for x in base.cr.doFindAll('Fisherman'):
            try:
                if x.zoneId != base.localAvatar.zoneId:
                    x.removeNode()
                    x.nametag.unmanage(base.marginManager)
            except:
                pass
 
        for x in base.cr.doFindAll('Party Planner'):
            try:
                if x.zoneId != base.localAvatar.zoneId:
                    x.removeNode()
                    x.nametag.unmanage(base.marginManager)
            except:
                pass
           
        for x in base.cr.doFindAll('render/donald'):
            try:
                if x.zoneId != base.localAvatar.zoneId:
                    x.removeNode()
                    x.nametag.unmanage(base.marginManager)
            except:
                pass
 
        for x in base.cr.doFindAll('render/minnie'):
            try:
                if x.zoneId != base.localAvatar.zoneId:
                    x.removeNode()
                    x.nametag.unmanage(base.marginManager)
            except:
                pass
 
        for x in base.cr.doFindAll('render/mickey'):
            try:
                if x.zoneId != base.localAvatar.zoneId:
                    x.removeNode()
                    x.nametag.unmanage(base.marginManager)
            except:
                pass
 
        for x in base.cr.doFindAll('render/pluto'):
            try:
                if x.zoneId != base.localAvatar.zoneId:
                    x.removeNode()
                    x.nametag.unmanage(base.marginManager)
            except:
                pass
 
        for x in base.cr.doFindAll('render/daisy'):
            try:
                if x.zoneId != base.localAvatar.zoneId:
                    x.removeNode()
                    x.nametag.unmanage(base.marginManager)
            except:
                pass
 
        for x in base.localAvatar.getNearbyPlayers(100000000000000, False):
            try:
                y = base.cr.doId2do.get(x)
                if y.zoneId != base.localAvatar.zoneId:
                    y.removeNode()
                    y.nametag.unmanage(base.marginManager)
            except:
                pass
 
        for x in base.cr.doFindAll('Butterfly'):
            x.butterflyNode.remove()
 
        for x in base.cr.doFindAll('Flower'):
            x.bigFlower.removeNode()
 
        for x in base.cr.doFindAll('Treasure'):
            x.setPosition(0, 0, 8**8)
 
        for x in base.cr.doFindAll('render/DistributedFishingTarget'):
            x.bubbles.removeNode()
            x.removeNode()
                
    def gainLaff(self):
        if base.localAvatar.getHp()!=base.localAvatar.getMaxHp():
            if self.unloaded:
                countryClubAutoer.preTele()
                self.interest1=base.cr.addInterest(base.localAvatar.defaultShard, 9000, 5, None)
                self.interest2=base.cr.addInterest(base.localAvatar.defaultShard, 3000, 5, None)
                self.unloaded=False
            self.collectLaff()
        if self.wasInBattle:
            countryClubAutoer.enterBattle()
     
    def loadGagshop(self):           
        if not base.cr.doFind('Clerk'):
            self.contextId = base.cr.addInterest(base.localAvatar.defaultShard, self.gagshop_zoneId, 4, event=None)
        try:
            if not int(render.find('**/*gagShop_interior_english*').getZ()) == 8**8:
                render.find('**/*gagShop_interior_english*').setZ(8**8)
                for k in base.cr.doFindAll('Clerk'):
                    k.freeAvatar = lambda *x:None
                    k.nametag.unmanage(base.marginManager)
        except:
            pass
            
    def buyGags(self):
        desiredInv=self.desiredInv
        try:
            maxCarryGags = base.localAvatar.getMaxCarry()     
            if base.cr.doFindAll('Clerk'):
                num_gags = 0
                for inventory_number in base.localAvatar.inventory.makeFromNetString(desiredInv):
                    for k in inventory_number[:-1]:
                        num_gags += k
                for clerk in base.cr.doFindAll('Clerk'):
                    change = (base.localAvatar.getMoney() - num_gags)
                    oldString = base.localAvatar.inventory.makeNetString()
                    newString = desiredInv[:6] + oldString[6] + desiredInv[7:13] + oldString[13] + desiredInv[14:20] + oldString[20] + desiredInv[21:27] + oldString[27] + desiredInv[28:34] + oldString[34] + desiredInv[35:48] + oldString[48]
                    clerk.sendUpdate('setInventory', [newString, change, 1])
                money = base.localAvatar.getMoney()
                maxMoney = base.localAvatar.getMaxMoney()
                base.cr.bankManager.d_transferMoney(money - maxMoney)
        except:
            pass
    
    def unloadGagshop(self):
        if hasattr(self, 'contextId'):
            try:
                base.cr.removeInterest(self.contextId)
            except:
                pass
        
    def restock(self):
        try:
            if base.localAvatar.inventory.inventory[self.firstTrack][self.desiredLevel1]<2 or base.localAvatar.inventory.inventory[self.secondTrack][self.desiredLevel2]<2 or base.localAvatar.inventory.inventory[self.thirdTrack][self.desiredLevel3]<2:
                Sequence(Func(self.loadGagshop),Wait(1),Func(self.buyGags),Wait(0.5),Func(self.unloadGagshop)).start()
        
        except:
            pass
    
    def revertFunctions(self):
        self.noToons.finish()
        try:
            base.cr.removeInterest(self.interest1)
            base.cr.removeInterest(self.interest2)
            self.unloaded=True
        except:
            pass
            

restock=restock()

class OtherFunctions:
    oldDockInit=DDPlayground.DDPlayground.__init__
    oldHqDoorInit=DistributedCogHQDoor.DistributedCogHQDoor.__init__
    oldEnterReward=DistributedBattle.DistributedBattle.enterReward
    oldDenyBattle=DistributedSuit.denyBattle
    oldSendUpdate=DistributedObject.DistributedObject.sendUpdate
    
    def __init__(self):
        self.shouldContinue=False
        self.bossCount=0
        self.numberToSuit={0:'Flunky',1:'Pencil Pusher',2:'Yesman',3:'Micromanager',
                           4:'Downsizer',5:'Head Hunter',6:'Corporate Raider',7:'The Big Cheese'}
        DDPlayground.DDPlayground.__init__=lambda *args:self.newDockInit(*args)
        DistributedCogHQDoor.DistributedCogHQDoor.__init__=lambda *args: self.newHqDoorInit(*args)
        DistributedBattle.DistributedBattle.enterReward=lambda *args: self.newEnterReward(*args)
        DistributedSuit.denyBattle=lambda *args: self.oldDenyBattle(self,*args)

    def attack(self):
        try:
            for battle in base.cr.doFindAll('battle'):
                if base.localAvatar.inventory.inventory[restock.firstTrack][restock.desiredLevel1]>0:
                    battle.sendUpdate('requestAttack', [restock.firstTrack, restock.desiredLevel1, battle.suits[0].doId])
                else:
                    break
                    
                if base.localAvatar.getHp()<(base.localAvatar.getMaxHp()*0.75):
                
                    if base.localAvatar.inventory.inventory[restock.secondTrack][restock.desiredLevel2]>0:
                        battle.sendUpdate('requestAttack', [restock.secondTrack, restock.desiredLevel2, base.localAvatar.doId])
                    else:
                        break
                        
                    if base.localAvatar.inventory.inventory[restock.thirdTrack][restock.desiredLevel3]>0:
                        battle.sendUpdate('requestAttack', [restock.thirdTrack, restock.desiredLevel3, battle.suits[0].doId])
                    else:
                        break
                        
                else:
                    if base.localAvatar.inventory.inventory[restock.thirdTrack][restock.desiredLevel3]>0:
                        battle.sendUpdate('requestAttack', [restock.thirdTrack, restock.desiredLevel3, battle.suits[0].doId])
                    else:
                        break
        except:
            pass
            
    def sendUpdateHook(self, newself, fieldName, args=[], sendToId=None):
        if fieldName=="requestAttack":
            self.oldSendUpdate(newself,"requestAttack", args, sendToId)
            self.oldSendUpdate(newself,"movieDone",[])
            newself.d_rewardDone(base.localAvatar.doId)
        else:
            self.oldSendUpdate(newself,fieldName, args, sendToId)
        
    def newDockInit(self,*args):
        self.oldDockInit(*args)
        if self.shouldContinue:
            self.checkStocks()
            
    def newHqDoorInit(self,*args):
        self.oldHqDoorInit(*args)
        if self.shouldContinue:
            self.walk()
            if base.cr.doFind('CogKart'):
                self.checkStocks()
            else:
                countryClubAutoer.attackSeq.loop()
                Sequence(Wait(3),Func(self.enterRandomBattle)).start()
    
    def newEnterReward(self,*args):
        self.oldEnterReward(*args)
        if otherFunctions.shouldContinue:
            if base.localAvatar.getHp()>105:
                countryClubAutoer.attackSeq.finish()
                Sequence(Wait(1),Func(self.teleBack)).start()
            else:
                Sequence(Wait(1),Func(self.enterRandomBattle)).start()
     
    def newDenyBattle(self,*args):
        self.oldDeneyBattle(*args)
        if self.shouldContinue:
            self.enterRandomBattle()
        
    def checkStocks(self):
        if self.shouldEnd:
            self.shouldContinue=False
        if self.haveJb():
            if self.shouldContinue:
                if self.getStocksLeft()==0:
                    if base.cr.doFind('DistributedCogHQDoor'):
                        ceoAutoer.start()
                    else:
                        restock.restock()
                        restock.collectLaff()
                        self.walk()
                        autoerGui.display.newLine('Teleporting to bossbot hq')
                        Sequence(Wait(2),Func(self.teleBack)).start()
                else:
                    if base.cr.doFind('DistributedCogHQDoor'):
                        if base.localAvatar.getHp()>105:
                            countryClubAutoer.start()
                        else:
                            autoerGui.display.newLine('Gaining laff back')
                            Sequence(Wait(2),Func(self.teleBack,12000)).start()
                    else:
                        restock.restock()
                        restock.collectLaff()
                        self.walk()
                        if base.localAvatar.getHp()>105:
                            autoerGui.display.newLine('Teleporting to bossbot hq')
                            Sequence(Wait(2),Func(self.teleBack)).start()
                        else:
                            autoerGui.display.newLine('Gaining laff back')
                            Sequence(Wait(2),Func(self.teleBack,12000)).start()
            else:
                restock.noToons.finish()
                try:
                    base.cr.removeInterest(restock.interest1)
                    base.cr.removeInterest(restock.interest2)
                    restock.unloaded=True
                except:
                    pass
                base.localAvatar.setSystemMessage(0,"Thanks for using freshollie's ceo maxer")
        else:
            base.localAvatar.setSystemMessage(0,'You have run out of jelly beans, please use the fishing code to gain some')
    
    def getStocksLeft(self):
        return CogDisguiseGlobals.getTotalMerits(base.localAvatar,0)-base.localAvatar.cogMerits[0]

    def walk(self):
        try:
            base.cr.playGame.getPlace().fsm.forceTransition('walk')
        except:
            pass
       
    def teleBack(self,zone=10000):
        try:
            self.walk()
            base.cr.playGame.getPlace().handleBookCloseTeleport(zone, zone)
        except:
            pass
                
        
    def haveJb(self):
        if base.localAvatar.cogLevels[0]==49:
            return True
        elif base.localAvatar.getMoney()==0:
            return False
        else:
            return True
           
    def enterRandomBattle(self):
        if base.cr.doFindAll('battle')==[]:
            battles = []
            cogList = base.cr.doFindAll("render")
            for x in cogList:
                if isinstance(x, DistributedSuit):
                    if x.activeState == 6:
                        battles.append(x)
            if battles != []:
                self.walk()
                battle = random.choice(battles)
                pos, hpr = battle.getPos(), battle.getHpr()
                base.localAvatar.setPosHpr(pos, hpr)
                battle.d_requestBattle(pos, hpr)
            else:
                pass
        
    def setStop(self):
        self.shouldEnd=True
        base.localAvatar.setSystemMessage(1,"The Autoer will stop at the end of this run")
        autoerGui.stopTimer()
    
    def start(self):
        DistributedObject.DistributedObject.sendUpdate=lambda newself, fieldName, args=[], sendToId=None: self.sendUpdateHook(newself, fieldName, args, sendToId)
        
        self.shouldContinue=True
        self.shouldEnd=False
        autoerGui.startTimer()
        self.checkStocks()
    
    def revertFunctions(self):
        DDPlayground.DDPlayground.__init__=self.oldDockInit
        DistributedCogHQDoor.DistributedCogHQDoor.__init__=self.oldHqDoorInit
        DistributedBattle.DistributedBattle.enterReward=self.oldEnterReward
        DistributedSuit.denyBattle=self.oldDenyBattle
        DistributedObject.DistributedObject.sendUpdate=self.oldSendUpdate
        
otherFunctions=OtherFunctions()

class CountryClubAutoer:
    oldCountryClubInit=DistributedCountryClub.DistributedCountryClub.__init__
    oldEnterReward=DistributedCountryClubBattle.DistributedCountryClubBattle.enterReward
    oldGolfGameToonEnter=DistributedGolfGreenGame.DistributedGolfGreenGame._DistributedGolfGreenGame__handleToonEnter
    oldEnterCountryClubReward=DistributedCountryClubBattle.DistributedCountryClubBattle.enterCountryClubReward
    
    def __init__(self): 
        self.attackSeq=Sequence(Func(restock.restock),Wait(1.0),Func(otherFunctions.attack),Wait(1.0))
        self.gainLaffSeq=Sequence(Func(restock.gainLaff),Wait(3.0))
        self.battleNum=1
        DistributedCountryClub.DistributedCountryClub.__init__=lambda *args:self.newCountryClubInit(*args)
        DistributedCountryClubBattle.DistributedCountryClubBattle.enterReward=lambda *args:self.newEnterReward(*args)
        DistributedGolfGreenGame.DistributedGolfGreenGame._DistributedGolfGreenGame__handleToonEnter=lambda *args:self.newGolfGameToonEnter(*args)
        base.cr.doFind('SafeZone').d_enterSafeZone=lambda *args: self.newSafeZone(*args)
        base.localAvatar.died=lambda *args: self.newSafeZone(*args)
        LocalToon.LocalToon.died=lambda *args: self.newSafeZone(*args)
        DistributedCountryClubBattle.DistributedCountryClubBattle.d_toonDied=lambda *args: self.newSafeZone(*args)
        DistributedCountryClubBattle.DistributedCountryClubBattle.enterCountryClubReward=lambda *args:self.newEnterCountryClubReward(*args)
    
    def setFrontThree(self):
        self.floorNumToKartRoomNum={0:17,1:17,2:18}
        self.battles=[1,3,5]
        self.greenRoom=9
        self.countryClubName='The Front Three'

    def setMiddleSix(self):
        self.greenRoom=29
        self.battles=[1,3,5,7,9,11]
        self.floorNumToKartRoomNum={0:17,1:17,2:17,3:17,4:17,5:18}
        self.countryClubName='The Middle Six'
    
    def setBackNine(self):
        self.greenRoom=39
        self.battles=[1,3,5,7,9,11,13,15,17]
        self.floorNumToKartRoomNum={0:17,1:17,2:17,3:17,4:17,5:17,6:17,7:17,8:18}
        self.countryClubName='The Back Nine'
        
    def preTele(self):
        DistributedTrolley.DistributedTrolley.__init__ = newInit
        DistributedPartyGate.DistributedPartyGate.__init__ = newInit
        DistributedDoor.DistributedDoor.__init__ = newInit
        base.localAvatar.stopLookAroundNow()
            
    def generateAgain(self):
        DistributedTrolley.DistributedTrolley.__init__ = oldTrolleyInit
        DistributedPartyGate.DistributedPartyGate.__init__ = oldPartyInit
        DistributedDoor.DistributedDoor.__init__ = oldDoorInit
        base.localAvatar.findSomethingToLookAt = restock.oldFindSomethingToLookAt
        ToonHead.ToonHead._ToonHead__lookAround = restock.oldLookAround

    def enterBattle(self):
        if base.localAvatar.getHp()>0:
            restock.wasInBattle=False
            battles = []
            cogList = base.cr.doFindAll("render")
            for x in cogList:
                if isinstance(x, DistributedMintSuit):
                    if x.activeState == 6:
                        if self.battleNum in self.battles:
                            if x.doId not in base.cr.doFind('DistributedCountryClubRoom '+str(self.floorNumToKartRoomNum[base.cr.doFind('DistributedCountryClub.DistributedCountryClub').floorNum])).suitIds:
                                battles.append(x)
                        else:
                            if x.doId in base.cr.doFind('DistributedCountryClubRoom '+str(self.floorNumToKartRoomNum[base.cr.doFind('DistributedCountryClub.DistributedCountryClub').floorNum])).suitIds:
                                battles.append(x)
                            
            if battles != []:
                battle=battles[0]
                pos, hpr = battle.getPos(), battle.getHpr()
                base.localAvatar.setPosHpr(pos, hpr)
                battle.d_requestBattle(pos, hpr)
                autoerGui.display.newLine('Entering Battle '+str(self.battleNum))
                return True
            else:
                return False
        else:
            return True
    
    def doMoles(self):
        moleSeq=Sequence()
        autoerGui.display.newLine('Entering Floor '+str(base.cr.doFind('DistributedCountryClub.DistributedCountryClub').floorNum))
        autoerGui.display.newLine('Completing Mole Field')
        for moleField in base.cr.doFindAll('MoleField'):
            for i in range(moleField.numMoles):
                moleSeq.append(Func(moleField.sendUpdate,'whackedMole', [0, i]))
                moleSeq.append(Wait(0.05))
        moleSeq.append(Wait(0.5))
        moleSeq.append(Func(self.enterBattle))
        moleSeq.start()
            
    def doGolf(self):
        gameSeq=Sequence()
        autoerGui.display.newLine('Completing Golf')
        for greenGame in base.cr.doFindAll('GolfGreenGame'):
            for i in range(greenGame.boardsLeft):
                gameSeq.append(Func(greenGame.sendUpdate,'requestBoard', [1]))
        gameSeq.append(Wait(1))
        gameSeq.append(Func(self.endFloor))
        gameSeq.start()
        
    def enterCountryClub(self):
        otherFunctions.walk()
        for kart in base.cr.doFindAll('DistributedCogKart'):
            if kart.getDestName()==self.countryClubName:
                kart.handleEnterSphere(base.localAvatar.doId)
    
    def boardKart(self):
        otherFunctions.walk()
        for kart in base.cr.doFindAll('DistributedClubElevator'):
            kart.handleEnterSphere(base.localAvatar.doId)
            autoerGui.display.newLine('Boarding Kart')
            return
        autoerGui.display.newLine('Finishing Country Club')
        otherFunctions.teleBack()
        self.generateAgain()
        
        restock.noToons.finish()
        self.attackSeq.finish()
        self.gainLaffSeq.finish()
    
    def warpToRoom(self,room):
        if base.cr.doFind('DistributedCountryClub.DistributedCountryClub'):
            base.cr.doFind('DistributedCountryClub.DistributedCountryClub').warpToRoom(room)
                
    def newCountryClubInit(self,*args):
        self.oldCountryClubInit(*args)
        restock.noToons.loop()
        self.attackSeq.loop()
        self.gainLaffSeq.loop()
        Sequence(Wait(1),Func(self.doMoles)).start()
    
    def newGolfGameToonEnter(self,*args):
        self.oldGolfGameToonEnter(*args)
        if otherFunctions.shouldContinue:
            Sequence(Wait(1),Func(self.doGolf)).start()
    
    def newEnterReward(self,*args):
        self.oldEnterReward(*args)
        if otherFunctions.shouldContinue:
            autoerGui.display.newLine('Finished Battle '+str(self.battleNum))
            base.cr.doFind('battle').d_rewardDone(base.localAvatar.doId)
            self.battleNum+=1
            otherFunctions.walk()
            if not self.enterBattle():
                self.warpToRoom(self.greenRoom)
                otherFunctions.walk()
    
    def newSafeZone(self,*args):
        otherFunctions.walk()
        restock.wasInBattle=True
        autoerGui.display.newLine('Died, recovering')

    def newEnterCountryClubReward(self,*args):
        self.oldEnterCountryClubReward(*args)
        if otherFunctions.shouldContinue:
            otherFunctions.walk()
            autoerGui.display.newLine('Finished Battle '+str(self.battleNum))
            if not self.enterBattle():
                self.warpToRoom(self.greenRoom)
                Sequence(Wait(0.5),Func(otherFunctions.walk)).start()

    def endFloor(self):
        otherFunctions.walk()
        self.warpToRoom(self.floorNumToKartRoomNum[base.cr.doFind('DistributedCountryClub.DistributedCountryClub').floorNum])
        Sequence(Wait(0.5),Func(self.boardKart)).start()
    
    def start(self):
        self.battleNum=1
        if otherFunctions.getStocksLeft()>953:
            autoerGui.display.newLine('Entering The Back Nine')
            self.setBackNine()
        elif otherFunctions.getStocksLeft()>386:
            autoerGui.display.newLine('Entering The Middle Six')
            self.setMiddleSix()
        else:
            autoerGui.display.newLine('Entering The Front Three')
            self.setFrontThree()
        Sequence(Wait(1),Func(self.enterCountryClub)).start()
    
    def revertFunctions(self):
        DistributedCountryClub.DistributedCountryClub.__init__=self.oldCountryClubInit
        DistributedCountryClubBattle.DistributedCountryClubBattle.enterReward=self.oldEnterReward
        DistributedGolfGreenGame.DistributedGolfGreenGame._DistributedGolfGreenGame__handleToonEnter=self.oldGolfGameToonEnter
        DistributedCountryClubBattle.DistributedCountryClubBattle.enterCountryClubReward=self.oldEnterCountryClubReward
        base.cr.doFind('SafeZone').d_enterSafeZone=lambda *args: None
        base.localAvatar.died=lambda *args: None
        LocalToon.LocalToon.died=lambda *args: None
        DistributedCountryClubBattle.DistributedCountryClubBattle.d_toonDied=lambda *args: None
        self.generateAgain()
        

statsMethods=[self.hours+':'+self.minutes+':'+self.seconds,str(otherFunctions.bossCount),str(self.workOutNumberAnHour(otherFunctions.bossCount))\
             ,str(otherFunctions.numberToSuit[base.localAvatar.cogTypes[0]])+" Level "+str(base.localAvatar.cogLevels[0]+1)),str(otherFunctions.getStocksLeft())]
catagories=['Run Time',"Number of ceo's","Ceo's/Hour",'Suit','Stocks needed']

class CEOMaxer:

    def __init__(self):
        self.restock=restock()
        self.otherFunctions=OtherFunctions()
        self.ceoAutoer=CeoAutoer()
        self.countryClubAutoer=CountryClubAutoer(self)
        self.autoerGui=AutoerGui('VP Maxer',['Run Time',"Number of VP's","VP's/Hour",'Suit','Merits needed'],\
                                ['self.hours+":"+self.minutes+":"+self.seconds','str(vpMaxer.otherFunctions.bossCount)',\
                                'str(self.workOutNumberAnHour(vpMaxer.otherFunctions.bossCount))',\
                                'str(vpMaxer.otherFunctions.numberToSuit[base.localAvatar.cogTypes[3]])+" lvl "+str(base.localAvatar.cogLevels[3]+1)','str(vpMaxer.otherFunctions.getMeritsLeft())'],\
                                'VP MXR','sell')
        
    def revert(self):
        self.restock.revertFunctions()
        self.countryClubAutoer.revertFunctions()
        self.ceoAutoer.revertFunctions()
        self.otherFunctions.revertFunctions()
        self.autoerGui.destroy()
        del self.restock
        del self.factoryAutoer
        del self.vpAutoer
        del self.otherFunctions
        del self.autoerGui